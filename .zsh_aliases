# -- Aliases -- #
alias emacs='emacs -nw'
alias ls='ls -a -G'
alias rezsh='source ~/.zshrc'
alias vimf='vim "$(fzf)"'

# -- Editing config files -- #
alias ohmyzshrc='vim ~/.oh-my-zshrc'
alias zshrc='vim ~/.zshrc'
alias zshaliases='vim ~/.zsh_aliases'
alias tmuxconf='vim ~/.tmux.conf'
alias vimrc='vim ~/.vimrc'

# -- Tests and linters on all modified files -- #
alias rubocopmod='git diff-files --name-only --diff-filter=d | grep -e '.rb' -e '.jbuilder' | xargs rubocop'
alias rubocopmaster='git branch --show-current | xargs git diff master  --name-only | grep -e '.rb' -e '.jbuilder' | xargs rubocop'

alias rspecmod='git diff-files --name-only --diff-filter=d | grep _spec.rb | xargs bundle exec rspec'
alias rspecmaster='git branch --show-current | xargs git diff master  --name-only | grep _spec.rb | xargs bundle exec rspec'

alias jestmod='yarn jest --onlyChanged'

# -- Tests through fuzzy finder -- #
rspecf() {
  ./script/rspec_fzf.sh
}

rspecmodf() {
  ./script/rspec_fzf.sh -d
}

rspecmasterf() {
  ./script/rspec_fzf.sh -D
}

jestf() {
 ./script/jest_fzf.sh
}

jestmodf() {
 ./script/jest_fzf.sh -d
}

jestmasterf() {
  ./script/jest_fzf.sh -D
}

# -- Git related aliases -- #
fzf-git-branch-local() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --list --color=always --sort=-committerdate |
      grep -v HEAD |
      fzf --height 50% --ansi --no-multi --preview-window right:65% \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}

fzf-git-delete-local-branch() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch-local)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    echo "Are you sure you want to delete" $branch"?"
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) git branch -D $branch; break;;
            No ) break;;
        esac
    done
}

# Git checkout with fuzzy finding
fzf-git-branch() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --all --sort=-committerdate |
        grep -v HEAD |
        fzf --height 50% --ansi --no-multi --preview-window right:65% \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}

fzf-git-checkout() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}


# Git checkout only local branches with fuzzy finding
fzf-git-branch-local() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --sort=-committerdate |
        grep -v HEAD |
        fzf --height 50% --ansi --no-multi --preview-window right:65% \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}

fzf-git-checkout-local() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch-local)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}


fzf-git-rename-local-branch() {
  git rev-parse HEAD > /dev/null 2>&1 || return

  local branch

  branch=$(fzf-git-branch-local)
  if [[ "$branch" = "" ]]; then
    echo "No branch selected."
    return
  fi

  echo "New name? "
  read new_branch_name

  # Rename branch locally
  git branch -m "$branch" "$new_branch_name"
}

fzf-git-rebase-local-branch() {
  git rev-parse HEAD > /dev/null 2>&1 || return

  local thisbranch
  thisbranch=$(git branch --show-current)

  local tobranch
  tobranch=$(fzf-git-branch-local)
  if [[ "$tobranch" = "" ]]; then
    echo "No branch selected."
    return
  fi
  
  if [[ "$tobranch" = 'remotes/'* ]]; then
      git checkout --track $tobranch
  else
      git checkout $tobranch;
  fi

  git pull
  git checkout "$thisbranch"

  # interactive rebase
  git rebase "$tobranch" -i
}

git-merge-master() {
  local thisbranch
  thisbranch=$(git branch --show-current)

  git checkout master
  git pull
  git checkout "$thisbranch"
  git merge master
}


alias activate='source venv/bin/activate'
alias create_venv='python3 -m venv venv'
alias ga='git add'
alias gaa='git add --all'
alias gap='git add --patch'
alias gapa='git add --patch'
alias gb='fzf-git-branch'
alias gbd='fzf-git-delete-local-branch'
alias gc='git commit -v'
alias gcb='fzf-git-checkout'
alias gcblocal='fzf-git-checkout-local'
alias gchb='git checkout -b'
alias gclean_local='git fetch -p && git branch -r | awk '"'"'{print $1}'"'"' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '"'"'{print $1}'"'"' | xargs git branch -D'
alias gd='git diff'
alias gl='git log'
alias gl1='git log --oneline'
alias gmm='git-merge-master'
alias gpnb='git branch --show-current | xargs git push --set-upstream origin'
alias grenameb='fzf-git-rename-local-branch'
alias grb='fzf-git-rebase-local-branch'
alias gs='git status'

# More on development
alias getinet='ifconfig | grep inet'
