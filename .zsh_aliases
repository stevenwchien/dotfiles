# Aliases
alias emacs='emacs -nw'
alias ls='ls -a'
alias rezsh='source ~/.zshrc'
alias vimf='vim "$(fzf)"'

# Editing config files
alias ohmyzshrc='vim ~/.oh-my-zshrc'
alias zshrc='vim ~/.zshrc'
alias zshaliases='vim ~/.zsh_aliases'
alias tmuxconf='vim ~/.tmux.conf'
alias vimrc='vim ~/.vimrc'

# Git aliases
alias gs='git status'
alias ga='git add'
alias gc='git commit -v'
alias gl='git log'
alias gl1='git log --oneline'
alias gaa='git add --all'
alias gap='git add --patch'
alias gapa='git add --patch'
alias gclean_local='git fetch -p && git branch -r | awk '"'"'{print $1}'"'"' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '"'"'{print $1}'"'"' | xargs git branch -D'
alias gchb='git checkout -b'

# Run rubocop or rspec on all changes files
alias rubocop-mod='git ls-files -m -o --directory app spec | grep -e '.rb' -e '.jbuilder' | xargs rubocop'
alias rubocop-master='git branch --show-current | xargs git diff master...  --name-only | grep -e '.rb' -e '.jbuilder' | xargs rubocop'

alias rspecmod='git ls-files -m -o --directory spec | grep _spec.rb | xargs bundle exec rspec'
alias rspecmaster='git branch --show-current | xargs git diff master...  --name-only | grep _spec.rb | xargs bundle exec rspec'

# Running specs through fuzzy finder
rspecf() {
 ./script/rspec_fzf.sh
}

rspecmodf() {
  ./script/rspec_fzf.sh -d
}

rspecmasterf() {
 bundle exec rspec "$(git branch --show-current | xargs git diff master...  --name-only | grep _spec.rb | fzf)"
}

jestf() {
 ./script/jest_fzf.sh
}

jestmodf() {
 ./script/jest_modified_fzf.sh
}

# Git push new branch
gpnb() {
 git branch --show-current | xargs git push --set-upstream origin
}

# Git checkout with fuzzy finding
fzf-git-branch() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    git branch --color=always --all --sort=-committerdate |
        grep -v HEAD |
        fzf --height 50% --ansi --no-multi --preview-window right:65% \
            --preview 'git log -n 50 --color=always --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed "s/.* //" <<< {})' |
        sed "s/.* //"
}

fzf-git-checkout() {
    git rev-parse HEAD > /dev/null 2>&1 || return

    local branch

    branch=$(fzf-git-branch)
    if [[ "$branch" = "" ]]; then
        echo "No branch selected."
        return
    fi

    # If branch name starts with 'remotes/' then it is a remote branch. By
    # using --track and a remote branch name, it is the same as:
    # git checkout -b branchName --track origin/branchName
    if [[ "$branch" = 'remotes/'* ]]; then
        git checkout --track $branch
    else
        git checkout $branch;
    fi
}

alias gb='fzf-git-branch'
alias gcb='fzf-git-checkout'

